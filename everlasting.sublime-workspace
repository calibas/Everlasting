{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"getJSON",
				"getJSON"
			],
			[
				"grid",
				"grid"
			]
		]
	},
	"buffers":
	[
		{
			"file": "game.js",
			"settings":
			{
				"buffer_size": 36065,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "level-maker.html",
			"settings":
			{
				"buffer_size": 3657,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "var tileSize = 33;\nvar levelWidth = 8;\nvar levelHeight = 8;\nvar bgTileID = 0;\nvar loaded = false;\nvar tileSelection = 0;\n\nvar tileList = [];\n\nvar tileGrid = [];\n\nvar renderer = new PIXI.autoDetectRenderer(8 * tileSize + 3 , 8 * tileSize + 3, {backgroundColor:\"0x444444\"});\nrenderer.roundPixels = true;\nvar stage = new PIXI.Container();\nvar backgroundLayer = new PIXI.Container();\nvar tileLayer = new PIXI.Container();\nvar highlightLayer = new PIXI.Container();\nvar entityLayer = new PIXI.Container();\nvar charLayer = new PIXI.Container();\nvar overLayer = new PIXI.Container();\nvar messages = new PIXI.Container();\nstage.addChild(backgroundLayer);\nstage.addChild(tileLayer);\nstage.addChild(highlightLayer);\nstage.addChild(entityLayer);\nstage.addChild(charLayer);\nstage.addChild(overLayer);\nstage.addChild(messages);\n\n//PIXI.loader.add(\"tiles/hyptosis-grass.png\");\nvar loader = PIXI.loader;\nvar loader = new PIXI.loaders.Loader(); // you can also create your own if you want\n\nvar highlightBox = new PIXI.Graphics();\n\nvar music;\nvar sound = 1;\nvar sounds = {};\n\n$(document).ready(function(){\n\t\n\t//document.body.appendChild(renderer.view);\n\t$('#game-area-wrapper').append(renderer.view);\n\t\n\tif (getCookie('music') != '') {\n\t\t$('#mute-music img').css('opacity', 0.4);\n\t\t//music.pause();\n\t}\n\tif (getCookie('sound') != '') {\n\t\t$('#mute-sound img').css('opacity', 0.4);\n\t\tsound = 0;\n\t}\n\n\t$(\"#whForm\").submit(function(e) {\n\t\te.preventDefault();\n        levelWidth = $(\"#levelWidth\").val();\n        levelHeight = $(\"#levelHeight\").val();\n        bgTileID = $(\"#bgTileID\").val();\n        //console.log($(\"#tileGridJSON\").val());\n        tileGrid = JSON.parse($(\"#tileGridJSON\").val());\n        renderer.resize(levelWidth * tileSize + 3, levelHeight * tileSize + 3);\n        createTileGrid();\n        drawTiles();\n    });\n\n\t$.when (\n\t\t$.getJSON('tiles.json', {}, function() {}),\n\t\t$.getJSON('entities.json', {}, function() {})\n\t\t//$.getJSON('character.json', {}, function() {}),\n\t\t//$.getJSON('map1.json', {}, function() {})\n\t\t//$.ajax({url: \"map1.xml\", success: function() {}, cache: false})\n\t).done(function(arg1, arg2){//arg1, arg2){\n\t\tloadTiles(arg1[0]);\n\t\tloadEntities(arg2[0]);\n    \t//loadCharacter(arg1);\n    \t//loadMapJson(arg2);\n    \t//loadMap(arg3);\n\t});\n\t\n\t//Make arrow keys move character\n\t$(window).keypress(function(e) {\n\t  //if (loaded && character.moveX == -1) {\n       \tvar ev = e || window.event;\n       \tvar key = ev.keyCode || ev.which;\n       \tif (key == \"38\") {\n       \t}\n\t\tif (key == \"40\") {\n       \t}\n\t\tif (key == \"37\") {\n       \t}\n\t\t\n\t\tif (key == \"39\") {\n       \t}\n\t // }\n\t});\n\t\n\t//No right click on canvas (Add custom menu?)\n\t$('#game-area-wrapper canvas').bind('contextmenu', function(e){\n    \treturn false;\n\t}); \n\n\t$(\"#game-area-wrapper canvas\").click(function(e){\n\t\tvar xClickPos = Math.floor((e.pageX - this.offsetLeft) / tileSize);\n    \tvar yClickPos = Math.floor((e.pageY - this.offsetTop) / tileSize);\n    \tif (xClickPos > levelWidth - 1)\n    \t\txClickPos--;\n    \tif (yClickPos > levelHeight - 1)\n    \t\tyClickPos--;\n    \tvar text = \"x: \" + xClickPos + \"y: \" + yClickPos;\n\t\t//console.log(\"x: \" + xClickPos + \"y: \" + yClickPos);\n\t\tvar message = '<div style=\"color:rgb(255, 255, 121);\">' + text +'</div>';\n\t\t$('#message-log').append(message);\n\t\t$('#message-log').scrollTop($('#message-log')[0].scrollHeight);\n\t\tif (loaded) {\n\t\t\ttileGrid[xClickPos][yClickPos] = tileSelection;\n\t\t\tconsole.log(tileGrid[xClickPos][yClickPos]);\n\t\t\tcreateTileGrid();\n\t\t\tdrawTiles();\n\t\t}\n\t\t//TODO: Optional inspect\n\t\t//inspectTile(xClickPos, yClickPos);\n\t\t/*\n\t\tif (entities[characterID].moveX == -1) {\n\t\t\tentities[characterID].moveX = xClickPos;\n\t\t\tentities[characterID].moveY = yClickPos;\n\t\t\thighlightBox.position.x = xClickPos * tileSize;\n\t\t\thighlightBox.position.y = yClickPos * tileSize - 1;\n\t\t\thighlightBox.visible = true;\n\t\t} */\n\t});\n\t$(\"#tileList\").click(function(e){\n\t\tconsole.log(e.target.tagName);\n\t\tvar liID;\n\t\tif (e.target.tagName == \"IMG\") {\n\t\t\tliID = e.target.parentElement.id;\n\t\t} else if (e.target.tagName == \"BUTTON\") {\n\t\t\t\n\t\t\treturn;\n\t\t} else {\n\t\t\tliID = e.target.id;\n\t\t}\n\t\ttileSelection = parseInt(liID.substr(5));\n\t\t$(\"#tileSelection\").html('<img src=\"' + tileList[tileSelection].path + '\">');\n\t});\n\t$(\"#mute-music\").click(function(e){\n\t\tif (music.paused) {\n\t\t\tmusic.play();\n\t\t\t$('#mute-music img').css('opacity', 1.0);\n\t\t\tsetCookie('music', '');\n\t\t} else {\n\t\t\tmusic.pause();\n\t\t\t$('#mute-music img').css('opacity', 0.4);\n\t\t\tsetCookie('music', 'mute');\n\t\t}\n\t});\n\t$(\"#mute-sound\").click(function(e){\n\t\tif (sound == 0) {\n\t\t\tsound = 1;\n\t\t\t$('#mute-sound img').css('opacity', 1.0);\n\t\t\tsetCookie('sound', '');\n\t\t} else {\n\t\t\tsound = 0;\n\t\t\t$('#mute-sound img').css('opacity', 0.4);\n\t\t\tsetCookie('sound', '0');\n\t\t}\n\t});\n}); \n\nfunction loadTiles(tileListJSON) {\n\tconsole.log(\"loadTiles()\");\n\t//console.log(tileList);\n\ttileList = tileListJSON;\n\tfor (var i=0;i<tileList.length;i++) {\n\t\tvar tileInfo = '<li class=\"tileInfo\" id=\"tile-' + i + '\"><img src=\"'+ tileList[i].path + '\"> ' + i + ' ' + tileList[i].name + '<button>+</button></li>';\n\t\tloader.add(tileList[i].name,tileList[i].path);\n\t\t$(\"#tileList\").append(tileInfo);\n\t}\n\t//loader.add('grass',\"tiles/hyptosis-grass.png\");\n\t//loader.once('complete',onAssetsLoaded);\n\tloader.on('complete', onLoad);\n\tloader.load();\n\tconsole.log(loader);\n}\n\nfunction loadEntities(entityList) {\n\tconsole.log(\"loadEntities()\");\n\n\tanimate();\n}\n\nfunction onLoad() {\n\tconsole.log(\"onLoad()\");\n\n\tloaded = true;\n\tcreateTileGrid();\n\tdrawTiles();\n}\n\nfunction createTileGrid() {\n\tfor (var i=0;i<levelWidth;i++) {\n\t\tif (typeof tileGrid[i] === 'undefined') {\n\t\t\ttileGrid.push([]);\n\t\t}\n\t\tfor (var j=0;j<levelHeight;j++) {\n\t\t\tif (typeof tileGrid[i][j] === 'undefined') {\n\t\t\t\ttileGrid[i][j] = 0;\n\t\t\t}\n\t\t}\n\t}\n\t$(\"#tileGridJSON\").val(JSON.stringify(tileGrid));\n}\n\nfunction drawTiles() {\n\tconsole.log(\"drawTiles()\");\n\tif (loaded){\n\tbackgroundLayer.removeChildren();\n\tbackgroundLayer.cacheAsBitmap = false;\n\tfor (var i=0;i<levelWidth;i++) {\n\t\t\tfor (var j=0;j<levelHeight;j++) {\n\t\t\t\t//var colorMatrix = new PIXI.filters.ColorMatrixFilter();\n \t\t\t\t//Add slight random +/- contrast to tiles\n \t\t\t\t//colorMatrix.contrast((getRandomInt(0,10))/100, true);\n \t\t\t\t//colorMatrix.hue(getRandomInt(0,6)-3, true);\n\t\t\t\t\n\t\t\t\tvar tile = new PIXI.Sprite(loader.resources[tileList[bgTileID].name].texture);\n\t\t\t\ttile.position.x = i * tileSize + Math.floor(tileSize/2) + 2;\n\t\t\t\ttile.position.y = j * tileSize + Math.floor(tileSize/2) + 2;\n\t\t\t\ttile.scale.x = 1;\n\t\t\t\ttile.scale.y = 1;\n\t\t\t\ttile.anchor.x = 0.5;\n\t\t\t\ttile.anchor.y = 0.5;\n\t\t\t\t/*\n\t\t\t\tif (tileTypes[tileGrid[i][j]].hasOwnProperty(\"randomrotate\")) {\n\t\t\t\t\tvar rotateDeg = getRandomInt(0,3) * 90;\n\t\t\t\t\ttile.rotation = rotateDeg * Math.PI / 180;\n\t\t\t\t} */\n\t\t\t\t//tile.filters = [colorMatrix];\n\t\t\t\t//if (tileTypes[tileGrid[i][j]].z == 0) {\n\t\t\t\tbackgroundLayer.addChild(tile);\n\t\t\t\t//} else {\n\t\t\t\t//overLayer.addChild(tile);\n\t\t\t\t//}\n\t\t\t\tif (tileGrid[i][j] != 0) {\n\t\t\t\t\tvar tile2 = new PIXI.Sprite(loader.resources[tileList[tileGrid[i][j]].name].texture);\n\t\t\t\t\ttile2.position.x = i * tileSize + Math.floor(tileSize/2) + 2;\n\t\t\t\t\ttile2.position.y = j * tileSize + Math.floor(tileSize/2) + 2;\n\t\t\t\t\ttile2.scale.x = 1;\n\t\t\t\t\ttile2.scale.y = 1;\n\t\t\t\t\ttile2.anchor.x = 0.5;\n\t\t\t\t\ttile2.anchor.y = 0.5;\n\t\t\t\t\t//tile2.filters = [colorMatrix];\n\t\t\t\t\tbackgroundLayer.addChild(tile2);\n\t\t\t\t}\n\t\t\t}\n\t}\n\tbackgroundLayer.cacheAsBitmap = true;\n\t}\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n// Modified from http://www.w3schools.com/js/js_cookies.asp\nfunction setCookie(cname, cvalue, years = 5) {\n    var d = new Date();\n    d.setTime(d.getTime() + (years*365*24*60*60*1000));\n    var expires = \"expires=\"+d.toUTCString();\n    document.cookie = cname + \"=\" + cvalue + \"; \" + expires;\n}\n\nfunction getCookie(cname) {\n    var name = cname + \"=\";\n    var ca = document.cookie.split(';');\n    for(var i = 0; i < ca.length; i++) {\n        var c = ca[i];\n        while (c.charAt(0) == ' ') {\n            c = c.substring(1);\n        }\n        if (c.indexOf(name) == 0) {\n            return c.substring(name.length, c.length);\n        }\n    }\n    return \"\";\n}\n\nfunction openTab(e, tabName) {\n    // Declare all variables\n    var i, tabcontent, tablinks;\n\n    // Get all elements with class=\"tabcontent\" and hide them\n    tabcontent = document.getElementsByClassName(\"tabcontent\");\n    for (i = 0; i < tabcontent.length; i++) {\n        tabcontent[i].style.display = \"none\";\n    }\n\n    // Get all elements with class=\"tablinks\" and remove the class \"active\"\n    tablinks = document.getElementsByClassName(\"tablinks\");\n    for (i = 0; i < tablinks.length; i++) {\n        tablinks[i].className = tablinks[i].className.replace(\" active\", \"\");\n    }\n\n    // Show the current tab, and add an \"active\" class to the link that opened the tab\n    document.getElementById(tabName).style.display = \"block\";\n    e.currentTarget.className += \" active\";\n}\n\nfunction animate() {\n\t    // start the timer for the next animation loop\n\t    requestAnimationFrame(animate);\n\n\t    // this is the main render call that makes pixi draw your container and its children.\n\t    renderer.render(stage);\n}",
			"file": "level-maker.js",
			"file_size": 9444,
			"file_write_time": 131193431484657406,
			"settings":
			{
				"buffer_size": 9192,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "tiles.json",
			"settings":
			{
				"buffer_size": 1176,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "entities.json",
			"settings":
			{
				"buffer_size": 20,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "character.json",
			"settings":
			{
				"buffer_size": 281,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "game.html",
			"settings":
			{
				"buffer_size": 1802,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "map1.json",
			"settings":
			{
				"buffer_size": 3535,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"Package Control: Install Package"
			]
		],
		"width": 416.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/Quad Core/Documents/GitHub/Everlasting/map1.xml",
		"/C/Users/Quad Core/Documents/GitHub/Everlasting/everlasting.sublime-project"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"tileTypes",
			"onLoad",
			"tileLayer",
			"setLevel",
			"animate",
			"requestAnimationFrame",
			"animate",
			"renderer",
			"loaded",
			"console.log",
			"\"attack\"",
			"attack(",
			"isHostile",
			"animate",
			"distance",
			"factions",
			"eachTick",
			"var Entity",
			"Entity",
			"entityIneract",
			"attack",
			"hasOwn",
			"createMove",
			"attack",
			"checkForEntity",
			"CheckForEntity",
			"moveGrid",
			"findPath",
			"tempGrid",
			"findPath",
			"moveChar",
			"entityIneract",
			"="
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			" : "
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 7,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "game.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 36065,
						"regions":
						{
							"bookmarks":
							{
								"flags": 144,
								"icon": "bookmark",
								"regions":
								[
									[
										30197,
										30197
									]
								],
								"scope": "bookmarks"
							}
						},
						"selection":
						[
							[
								25381,
								25381
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 11221.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "level-maker.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3657,
						"regions":
						{
						},
						"selection":
						[
							[
								3432,
								3432
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1595.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "level-maker.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9192,
						"regions":
						{
						},
						"selection":
						[
							[
								4034,
								4034
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "tiles.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1176,
						"regions":
						{
						},
						"selection":
						[
							[
								144,
								144
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "entities.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20,
						"regions":
						{
						},
						"selection":
						[
							[
								16,
								16
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "character.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 281,
						"regions":
						{
						},
						"selection":
						[
							[
								157,
								157
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "game.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1802,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								1802
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "map1.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3535,
						"regions":
						{
						},
						"selection":
						[
							[
								969,
								969
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 140.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "everlasting.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"C:\\Users\\Quad Core\\Documents\\GitHub\\Everlasting\\character.json"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
